'''
Q. Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order (counter-clockwise) starting from the top left element
Examples:
Input1:
[
[1, 2, 3],
[4, 5, 6],
[7, 8, 9]
]
Output1:
[1, 4, 7, 8, 9, 6, 3, 2, 5]
Input2:
[
[1, 2, 3],
[4, 5, 6]
]
Output2: [1, 4, 5, 6, 3, 2]

'''


def solution(m):
    if not m or not m[0]:
        return []
     
    result = []
    rows = len(m)
    cols = len(m[0])
   
    top = 0
    bottom = rows - 1
    left = 0
    right = cols - 1
   
    while top <= bottom and left <= right:
            # Traverse down the left column
            for i in range(top, bottom + 1):
                result.append(m[i][left])
            left += 1
           
            # Added condition check to break the loop if boundaries overlap
            if left > right:
                break
           
            # Traverse right across the bottom row
            for i in range(left, right + 1):
                result.append(m[bottom][i])
            bottom -= 1
           
            # Added condition check to break the loop if boundaries overlap
            if top > bottom:
                break
           
            # Traverse up the right column
            for i in range(bottom, top - 1, -1):
                result.append(m[i][right])
            right -= 1
           
            # Added condition check to break the loop if boundaries overlap
            if left > right:
                break
           
            # Traverse left across the top row
            for i in range(right, left - 1, -1):
                result.append(m[top][i])
            top += 1
       
    return result

